{"version":3,"sources":["components/ErrorBoundary.jsx","components/SearchForm.jsx","components/GeocodeResult.jsx","components/Map.jsx","components/App.jsx","utils/serviceWorker.js","index.js"],"names":["ErrorBoundary","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","react_default","a","createElement","children","React","Component","SearchForm","place","e","preventDefault","onSubmit","_this2","handleSubmit","type","value","onChange","handlePlaceChange","target","GeocodeResult","_ref","address","lat","lng","className","defaultProps","require","config","InnerMap","withGoogleMap","lib","defaultZoom","defaultCenter","position","center","marker","Map","es","params","key","process","libraries","render","googleMaps","containerElement","mapElement","App","message","axios","get","then","results","console","log","data","result","status","location","geometry","formatted_address","setErrorMessage","catch","_this3","components_SearchForm","handlePlaceSubmit","components_GeocodeResult","components_ErrorBoundary","components_Map","Boolean","window","hostname","match","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oNAsBeA,cAnBb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAAEC,UAAU,GAFRR,iFAKDS,EAAOC,GAEvBP,KAAKQ,SAAS,CAAEH,UAAU,qCAI1B,OAAIL,KAAKI,MAAMC,SAENI,EAAAC,EAAAC,cAAA,mCAEFX,KAAKJ,MAAMgB,gBAhBMC,IAAMC,6BCsCnBC,cApCb,SAAAA,EAAYnB,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAe,IACjBlB,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAiB,GAAAZ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXY,MAAO,kCAHQnB,iFAODmB,GAChBhB,KAAKQ,SAAS,CACZQ,+CAISC,GACXA,EAAEC,iBACFlB,KAAKJ,MAAMuB,SAASnB,KAAKI,MAAMY,wCAGxB,IAAAI,EAAApB,KACP,OACES,EAAAC,EAAAC,cAAA,QAAMQ,SAAU,SAAAF,GAAC,OAAIG,EAAKC,aAAaJ,KACrCR,EAAAC,EAAAC,cAAA,SACEW,KAAK,OACLC,MAAOvB,KAAKI,MAAMY,MAClBQ,SAAU,SAAAP,GAAC,OAAIG,EAAKK,kBAAkBR,EAAES,OAAOH,UAEjDd,EAAAC,EAAAC,cAAA,SAAOW,KAAK,SAASC,MAAM,yBA3BVT,aCAnBa,EAAgB,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAASC,EAAZF,EAAYE,IAAKC,EAAjBH,EAAiBG,IAAjB,OACpBtB,EAAAC,EAAAC,cAAA,MAAIqB,UAAU,kBACZvB,EAAAC,EAAAC,cAAA,+BAEGkB,GAEHpB,EAAAC,EAAAC,cAAA,+BAEGmB,GAEHrB,EAAAC,EAAAC,cAAA,+BAEGoB,KAWPJ,EAAcM,aAAe,CAC3BJ,QAAS,GACTC,IAAK,EACLC,IAAK,GAGQJ,yBC3BfO,EAAQ,KAAUC,SAElB,IAAMC,EAAWC,wBAAc,SAAAzC,GAAK,OAClCa,EAAAC,EAAAC,cAAC2B,EAAA,UAAD,CACEC,YAAa,GACbC,cAAe5C,EAAM6C,SACrBC,OAAQ9C,EAAM6C,UAEdhC,EAAAC,EAAAC,cAAC2B,EAAA,OAAW1C,EAAM+C,WAIhBC,EAAM,SAAAhB,GAAkB,IACtBa,EAAW,CAAEX,IADSF,EAAfE,IACWC,IADIH,EAAVG,KAElB,OACEtB,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CACEC,OAAQ,CACNC,IAAKC,0CACLC,UAAW,mBAEbC,OAAQ,SAACC,EAAY7C,GAAb,OACN6C,EACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyB,EAAD,CACEgB,iBAAkB3C,EAAAC,EAAAC,cAAA,YAClB0C,WAAY5C,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,QAC3BS,SAAUA,EACVE,OAAQ,CAAEF,cAEXnC,GAAgB,2BAGnBG,EAAAC,EAAAC,cAAA,WAEa,kBAAVL,EAA4BG,EAAAC,EAAAC,cAAA,SAAIL,GAAaG,EAAAC,EAAAC,cAAA,8BAa1DiC,EAAIX,aAAe,CACjBH,IAAK,WACLC,IAAK,aAGQa,QCjDfV,EAAQ,KAAUC,SAElB,IAsEemB,cAnEb,SAAAA,EAAY1D,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAsD,IACjBzD,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAwD,GAAAnD,KAAAH,KAAMJ,KACDQ,MAAQ,GAFIP,+EAKH0D,GACdvD,KAAKQ,SAAS,CACZqB,QAAS0B,EACTzB,IAAK,EACLC,IAAK,8CAISf,GAAO,IAAAI,EAAApB,KACvBwD,IACGC,IAlBkB,oDAkBI,CACrBX,OAAQ,CACNC,IAAKC,0CACLnB,QAASb,KAGZ0C,KAAK,SAAAC,GACJC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EAAQG,KACfC,EAASJ,EAAQG,KAAKH,QAAQ,GACpC,OAAQG,EAAKE,QACX,IAAK,KACH,IAAMC,EAAWF,EAAOG,SAASD,SACjC7C,EAAKZ,SAAS,CACZqB,QAASkC,EAAOI,kBAChBrC,IAAKmC,EAASnC,IACdC,IAAKkC,EAASlC,MAEhB,MAEF,IAAK,eACHX,EAAKgD,gBAAgB,kFACrB,MAEF,QACEhD,EAAKgD,gBAAgB,mEAI1BC,MAAM,SAAA/D,GACLc,EAAKgD,gBAAgB,6FAIlB,IAAAE,EAAAtE,KACP,OACES,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAC4D,EAAD,CAAYpD,SAAU,SAAAH,GAAK,OAAIsD,EAAKE,kBAAkBxD,MACtDP,EAAAC,EAAAC,cAAC8D,EAAD,CACE5C,QAAS7B,KAAKI,MAAMyB,QACpBC,IAAK9B,KAAKI,MAAM0B,IAChBC,IAAK/B,KAAKI,MAAM2B,MAElBtB,EAAAC,EAAAC,cAAC+D,EAAD,KACEjE,EAAAC,EAAAC,cAACgE,EAAD,CAAK7C,IAAK9B,KAAKI,MAAM0B,IAAKC,IAAK/B,KAAKI,MAAM2B,eA7DlCjB,aCFE8D,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCXNC,IAAS9B,OAAOzC,EAAAC,EAAAC,cAACsE,EAAD,MAASC,SAASC,eAAe,SDoH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.2ac30bc7.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  componentDidCatch(error, info) {\n    // Display fallback UI\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass SearchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      place: \"東京タワー\"\r\n    };\r\n  }\r\n\r\n  handlePlaceChange(place) {\r\n    this.setState({\r\n      place\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.place);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={e => this.handleSubmit(e)}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.place}\r\n          onChange={e => this.handlePlaceChange(e.target.value)}\r\n        />\r\n        <input type=\"submit\" value=\"検索\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GeocodeResult = ({ address, lat, lng }) => (\r\n  <ul className=\"geocode-result\">\r\n    <li>\r\n      住所：\r\n      {address}\r\n    </li>\r\n    <li>\r\n      緯度：\r\n      {lat}\r\n    </li>\r\n    <li>\r\n      経度：\r\n      {lng}\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nGeocodeResult.propTypes = {\r\n  address: PropTypes.string,\r\n  lat: PropTypes.number,\r\n  lng: PropTypes.number\r\n};\r\n\r\nGeocodeResult.defaultProps = {\r\n  address: \"\",\r\n  lat: 0,\r\n  lng: 0\r\n};\r\n\r\nexport default GeocodeResult;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport ReactGoogleMapLoader from \"react-google-maps-loader\";\r\nimport { withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\r\nrequire(\"dotenv\").config();\r\n\r\nconst InnerMap = withGoogleMap(props => (\r\n  <GoogleMap\r\n    defaultZoom={12}\r\n    defaultCenter={props.position}\r\n    center={props.position}\r\n  >\r\n    <Marker {...props.marker} />\r\n  </GoogleMap>\r\n));\r\n\r\nconst Map = ({ lat, lng }) => {\r\n  const position = { lat, lng };\r\n  return (\r\n    <ReactGoogleMapLoader\r\n      params={{\r\n        key: process.env.REACT_APP_GOOGLEMAP_API_KEY,\r\n        libraries: \"places,geometry\"\r\n      }}\r\n      render={(googleMaps, error) =>\r\n        googleMaps ? (\r\n          <div>\r\n            <InnerMap\r\n              containerElement={<div />}\r\n              mapElement={<div className=\"map\" />}\r\n              position={position}\r\n              marker={{ position }}\r\n            />\r\n            {error ? error : \"Google Maps is loaded !\"}\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            {/*Check for network error so loading state ends if user lost connection.*/}\r\n            {error === \"Network Error\" ? <p>{error}</p> : <p>isLoading...</p>}\r\n          </div>\r\n        )\r\n      }\r\n    />\r\n  );\r\n};\r\n\r\nMap.propTypes = {\r\n  lat: PropTypes.number,\r\n  lng: PropTypes.number\r\n};\r\n\r\nMap.defaultProps = {\r\n  lat: 35.6585805,\r\n  lng: 139.7454329\r\n};\r\n\r\nexport default Map;\r\n","import React, { Component } from \"react\";\nimport ErrorBoundary from \"./ErrorBoundary\";\nimport axios from \"axios\";\n\nimport SearchForm from \"./SearchForm\";\nimport GeocodeResult from \"./GeocodeResult\";\nimport Map from \"./Map\";\n\nrequire(\"dotenv\").config();\n\nconst GEOCODE_ENDPOINT = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  setErrorMessage(message) {\n    this.setState({\n      address: message,\n      lat: 0,\n      lng: 0\n    });\n  }\n\n  handlePlaceSubmit(place) {\n    axios\n      .get(GEOCODE_ENDPOINT, {\n        params: {\n          key: process.env.REACT_APP_GOOGLEMAP_API_KEY,\n          address: place\n        }\n      })\n      .then(results => {\n        console.log(results);\n        const data = results.data;\n        const result = results.data.results[0];\n        switch (data.status) {\n          case \"OK\": {\n            const location = result.geometry.location;\n            this.setState({\n              address: result.formatted_address,\n              lat: location.lat,\n              lng: location.lng\n            });\n            break;\n          }\n          case \"ZERO_RESULTS\": {\n            this.setErrorMessage(\"結果が見つかりませんでした\");\n            break;\n          }\n          default: {\n            this.setErrorMessage(\"エラーが発生しました\");\n          }\n        }\n      })\n      .catch(error => {\n        this.setErrorMessage(\"通信に失敗しました\");\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>緯度経度検索</h1>\n        <SearchForm onSubmit={place => this.handlePlaceSubmit(place)} />\n        <GeocodeResult\n          address={this.state.address}\n          lat={this.state.lat}\n          lng={this.state.lng}\n        />\n        <ErrorBoundary>\n          <Map lat={this.state.lat} lng={this.state.lng} />\n        </ErrorBoundary>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./utils/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}