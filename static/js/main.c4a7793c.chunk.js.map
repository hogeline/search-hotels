{"version":3,"sources":["components/SearchForm.jsx","components/GeocodeResult.jsx","components/Map.jsx","components/App.jsx","utils/serviceWorker.js","index.js"],"names":["SearchForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","place","setState","e","preventDefault","onSubmit","_this2","react_default","a","createElement","handleSubmit","type","value","onChange","handlePlaceChange","target","Component","GeocodeResult","_ref","address","lat","lng","className","defaultProps","InnerMap","withGoogleMap","lib","defaultZoom","defaultCenter","position","center","marker","Map","containerElement","mapElement","require","config","App","message","axios","get","params","key","process","then","results","console","log","data","result","status","location","geometry","formatted_address","setErrorMessage","catch","error","_this3","components_SearchForm","handlePlaceSubmit","components_GeocodeResult","components_Map","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c4a7793c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass SearchForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      place: \"東京タワー\"\r\n    };\r\n  }\r\n\r\n  handlePlaceChange(place) {\r\n    this.setState({\r\n      place\r\n    });\r\n  }\r\n\r\n  handleSubmit(e) {\r\n    e.preventDefault();\r\n    this.props.onSubmit(this.state.place);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={e => this.handleSubmit(e)}>\r\n        <input\r\n          type=\"text\"\r\n          value={this.state.place}\r\n          onChange={e => this.handlePlaceChange(e.target.value)}\r\n        />\r\n        <input type=\"submit\" value=\"検索\" />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nSearchForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default SearchForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst GeocodeResult = ({ address, lat, lng }) => (\r\n  <ul className=\"geocode-result\">\r\n    <li>\r\n      住所：\r\n      {address}\r\n    </li>\r\n    <li>\r\n      緯度：\r\n      {lat}\r\n    </li>\r\n    <li>\r\n      経度：\r\n      {lng}\r\n    </li>\r\n  </ul>\r\n);\r\n\r\nGeocodeResult.propTypes = {\r\n  address: PropTypes.string,\r\n  lat: PropTypes.number,\r\n  lng: PropTypes.number\r\n};\r\n\r\nGeocodeResult.defaultProps = {\r\n  address: \"\",\r\n  lat: 0,\r\n  lng: 0\r\n};\r\n\r\nexport default GeocodeResult;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { withGoogleMap, GoogleMap, Marker } from \"react-google-maps\";\r\n\r\nconst InnerMap = withGoogleMap(props => (\r\n  <GoogleMap\r\n    defaultZoom={12}\r\n    defaultCenter={props.position}\r\n    center={props.position}\r\n  >\r\n    <Marker {...props.marker} />\r\n  </GoogleMap>\r\n));\r\n\r\nconst Map = ({ lat, lng }) => {\r\n  const position = { lat, lng };\r\n  return (\r\n    <InnerMap\r\n      containerElement={<div />}\r\n      mapElement={<div className=\"map\" />}\r\n      position={position}\r\n      marker={{ position }}\r\n    />\r\n  );\r\n};\r\n\r\nMap.propTypes = {\r\n  lat: PropTypes.number,\r\n  lng: PropTypes.number\r\n};\r\n\r\nMap.defaultProps = {\r\n  lat: 35.6585805,\r\n  lng: 139.7454329\r\n};\r\n\r\nexport default Map;\r\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\nimport SearchForm from \"./SearchForm\";\nimport GeocodeResult from \"./GeocodeResult\";\nimport Map from \"./Map\";\n\nrequire(\"dotenv\").config();\n\nconst GEOCODE_ENDPOINT = \"https://maps.googleapis.com/maps/api/geocode/json\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  setErrorMessage(message) {\n    this.setState({\n      address: message,\n      lat: 0,\n      lng: 0\n    });\n  }\n\n  handlePlaceSubmit(place) {\n    axios\n      .get(GEOCODE_ENDPOINT, {\n        params: {\n          key: process.env.REACT_APP_GOOGLEMAP_API_KEY,\n          address: place\n        }\n      })\n      .then(results => {\n        console.log(results);\n        const data = results.data;\n        const result = results.data.results[0];\n        switch (data.status) {\n          case \"OK\": {\n            const location = result.geometry.location;\n            this.setState({\n              address: result.formatted_address,\n              lat: location.lat,\n              lng: location.lng\n            });\n            break;\n          }\n          case \"ZERO_RESULTS\": {\n            this.setErrorMessage(\"結果が見つかりませんでした\");\n            break;\n          }\n          default: {\n            this.setErrorMessage(\"エラーが発生しました\");\n          }\n        }\n      })\n      .catch(error => {\n        this.setErrorMessage(\"通信に失敗しました\");\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>緯度経度検索</h1>\n        <SearchForm onSubmit={place => this.handlePlaceSubmit(place)} />\n        <GeocodeResult\n          address={this.state.address}\n          lat={this.state.lat}\n          lng={this.state.lng}\n        />\n        <Map lat={this.state.lat} lng={this.state.lng} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./utils/serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}